<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>EventSourcing on Moien Tajik</title><link>/tags/eventsourcing/</link><description>Recent content in EventSourcing on Moien Tajik</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 24 Feb 2019 00:00:00 +0330</lastBuildDate><atom:link href="/tags/eventsourcing/index.xml" rel="self" type="application/rss+xml"/><item><title>Implementing CQRS with MediatR - Part 5</title><link>/posts/2019-02-24-mediatr-part-5/</link><pubDate>Sun, 24 Feb 2019 00:00:00 +0330</pubDate><guid>/posts/2019-02-24-mediatr-part-5/</guid><description>Part 5 of the CQRS with MediatR series introduces &lt;em>Event Sourcing&lt;/em> using &lt;strong>EventStore&lt;/strong>. It focuses on integrating EventStore into an ASP.NET Core application, highlighted by creating the &lt;code>EventStoreDbContext&lt;/code> class. The tutorial showcases the &lt;code>EventLoggerBehavior&lt;/code> in MediatR for logging Command actions and responses, utilizing a &lt;strong>Convention over Configuration&lt;/strong> approach. This part provides a practical guide for effectively tracking and understanding system state changes in a CQRS application through event history.</description></item><item><title>Implementing CQRS with MediatR - Part 4</title><link>/posts/2019-02-11-mediatr-part-4/</link><pubDate>Mon, 11 Feb 2019 00:00:00 +0330</pubDate><guid>/posts/2019-02-11-mediatr-part-4/</guid><description>In this part of the CQRS with MediatR series, &lt;em>behaviors&lt;/em> in MediatR are introduced for &lt;strong>aspect-oriented programming&lt;/strong>. The tutorial covers two specific behaviors: &lt;br> &lt;li>Performance counter behavior: for logging method execution times.&lt;/li> &lt;li>Transaction behavior: for managing database transactions and rollbacks.&lt;/li>&lt;br> Both are implemented using the &lt;code>IPipelineBehavior&lt;/code> interface, demonstrating how to write reusable, efficient code that adheres to the &lt;strong>DRY&lt;/strong> principle. The article provides practical examples and code snippets, showing how these behaviors enhance functionality and error handling in an ASP.NET Core application.</description></item><item><title>Implementing CQRS with MediatR - Part 3</title><link>/posts/2019-02-02-mediatr-part-3/</link><pubDate>Sat, 02 Feb 2019 00:00:00 +0330</pubDate><guid>/posts/2019-02-02-mediatr-part-3/</guid><description>Part 3 of the CQRS with MediatR series focuses on adding validation and event handling. Fluent Validation is introduced to validate commands, followed by the use of &lt;code>INotification&lt;/code> and &lt;code>INotificationHandler&lt;/code> for event handling, illustrated with a &lt;code>CustomerCreatedEvent&lt;/code>. This setup allows for separate event handlers for different actions like email notifications and logging, adhering to the &lt;strong>Single Responsibility Principle&lt;/strong>. The tutorial provides code examples for integrating these features into an ASP.NET Core application, setting the stage for the next part on MediatR behaviors and aspect-oriented programming.</description></item><item><title>Implementing CQRS with MediatR - Part 2</title><link>/posts/2019-01-27-mediatr-part-2/</link><pubDate>Sun, 27 Jan 2019 00:00:00 +0330</pubDate><guid>/posts/2019-01-27-mediatr-part-2/</guid><description>Discover the practical implementation of the CQRS pattern using MediatR in ASP.NET Core. This tutorial guides you through setting up MediatR, creating commands and queries with the &lt;code>IRequest&lt;/code> interface, and handling them with &lt;code>IRequestHandler&lt;/code>. It features a real-world example of adding a customer to a database, showcasing command creation, immutability, and the use of Entity Framework and AutoMapper. The article emphasizes decoupling in request handling, aligning with the &lt;strong>Hollywood Principle&lt;/strong>, and provides a glimpse into future topics like Fluent Validation. A must-read for developers looking to enhance their CQRS skills.</description></item><item><title>Implementing CQRS with MediatR - Part 1</title><link>/posts/2019-01-21-mediatr-part-1/</link><pubDate>Mon, 21 Jan 2019 00:00:00 +0330</pubDate><guid>/posts/2019-01-21-mediatr-part-1/</guid><description>This article dives into the implementation of the &lt;strong>CQRS&lt;/strong> design pattern using the MediatR library in .NET, simplifying its complexity. It explains the division of application methods into &lt;code>Command&lt;/code> and &lt;code>Query&lt;/code> functions, highlighting the benefits of this separation for technology choice and scalability. The piece also touches on the concept of events and &lt;strong>Event Sourcing&lt;/strong>, showcasing their roles in maintaining system states and facilitating troubleshooting. The use of the &lt;strong>Event Store&lt;/strong> database for implementing Event Sourcing is briefly introduced, offering a comprehensive view of the CQRS pattern and its practical application.</description></item></channel></rss>