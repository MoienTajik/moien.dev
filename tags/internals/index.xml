<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Internals on Moien Tajik</title><link>/tags/internals/</link><description>Recent content in Internals on Moien Tajik</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 16 Oct 2019 00:00:00 +0000</lastBuildDate><atom:link href="/tags/internals/index.xml" rel="self" type="application/rss+xml"/><item><title>C# Internals - Single and SingleOrDefault</title><link>/posts/2019-10-16-csharp-internals-single/</link><pubDate>Wed, 16 Oct 2019 00:00:00 +0000</pubDate><guid>/posts/2019-10-16-csharp-internals-single/</guid><description>This article demystifies the LINQ methods &lt;code>Single&lt;/code> and &lt;code>SingleOrDefault&lt;/code> in C#, addressing the misconception that they always traverse an entire &lt;code>Enumerable&lt;/code>. It explains the actual behavior of these methods, both with and without a predicate, contrasting them with &lt;code>First&lt;/code> and &lt;code>FirstOrDefault&lt;/code>. The article clarifies that &lt;code>SingleOrDefault&lt;/code> efficiently handles different scenarios, such as returning a default value, the only item, or throwing an error when multiple items exist. It emphasizes the operational differences and efficiency &lt;strong>O(1)&lt;/strong> without predicate and &lt;strong>O(N)&lt;/strong> with predicate of these methods, offering valuable insights for C# developers seeking to optimize their code.</description></item></channel></rss>